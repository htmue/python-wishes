# -*- coding:utf-8 -*-
# Created by Hans-Thomas on 2011-05-11.
#=============================================================================
#   test_parser.yaml --- Wishes parser vows, data driven
#=============================================================================

callbacks:

  reports start and end:
    tested_events:
    - [start, null]

    input: ''
    callbacks:
    - [start_parse, [<string>], {}]
    - [finish_parse, [], {}]

  recognizes Feature keyword:
    tested_events:
    - [start, feature]
    - [feature, null]

    input: |
      Feature: Parse feature file
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature and description:
    tested_events:
    - [feature, feature_description]
    - [feature_description, feature_description]
    - [feature_description, null]

    input: |
      Feature: Parse feature file
        As a developer
        I want to have a nice testing tool
        so coding is fun.
     
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_feature_description, [], {}]
    - [data, [As a developer], {}]
    - [data, [I want to have a nice testing tool], {}]
    - [data, [so coding is fun.], {}]
    - [finish_feature_description, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature and Scenario keyword:
    tested_events:
    - [feature, scenario]
    - [scenario, null]
  
    input: |
      Feature: Parse feature file
        Scenario: Test what is going on

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with description and Scenario:
    tested_events:
    - [feature_description, scenario]
  
    input: |
      Feature: Parse feature file
        As a developer
        I want to have a nice testing tool
        so coding is fun.

        Scenario: Test what is going on
     
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_feature_description, [], {}]
    - [data, [As a developer], {}]
    - [data, [I want to have a nice testing tool], {}]
    - [data, [so coding is fun.], {}]
    - [data, [''], {}]
    - [finish_feature_description, [], {}]
    - [start_scenario, [Test what is going on], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Scenario after pending Scenario:
    tested_events:
    - [scenario, scenario]

    input: |
      Feature: Parse feature file
        Scenario: pending
        Scenario: afterwards

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [pending], {}]
    - [finish_scenario, [], {}]
    - [start_scenario, [afterwards], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and Given keyword:
    tested_events:
    - [scenario, step]
    - [step, null]
  
    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given there is a step
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, there is a step], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and When keyword:
    tested_events:
    - [scenario, step]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          When there is some action
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [When, there is some action], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and Then keyword:
    tested_events:
    - [scenario, step]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Then I see some results
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Then, I see some results], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and And keyword:
    tested_events:
    - [scenario, step]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          And there is more
     
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [And, there is more], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and But keyword:
    tested_events:
    - [scenario, step]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          But there is something else
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [But, there is something else], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature Scenario and Steps:
    tested_events:
    - [step, step]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given there is a step
          And there is more
          When there is some action
          Then I see some results
          But there is something else
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, there is a step], {}]
    - [finish_step, [], {}]
    - [start_step, [And, there is more], {}]
    - [finish_step, [], {}]
    - [start_step, [When, there is some action], {}]
    - [finish_step, [], {}]
    - [start_step, [Then, I see some results], {}]
    - [finish_step, [], {}]
    - [start_step, [But, there is something else], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses multiline:
    tested_events:
    - [step, multiline]
    - [multiline, multiline_data]
    - [multiline, multiline_end]
  
    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given there is a step
            """
            With some
                  indented
              multiline text.
            """
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, there is a step], {}]
    - [start_multiline, [6], {}]
    - [data, ["With some\n"], {}]
    - [data, ["      indented\n"], {}]
    - [data, ["  multiline text.\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses multiline between steps:
    tested_events:
    - [step, step]
  
    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given there is a step
            """
            With some multiline text.
            """
          And another step afterwards
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, there is a step], {}]
    - [start_multiline, [6], {}]
    - [data, ["With some multiline text.\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [start_step, [And, another step afterwards], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses multiline before new scenario:
    tested_events:
    - [step, scenario]

    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given there is a step
            """
            With some multiline text.
            """
        Scenario: And another scenario behind
       
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, there is a step], {}]
    - [start_multiline, [6], {}]
    - [data, ["With some multiline text.\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [start_scenario, [And another scenario behind], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses multiline with indented multiline marker:
    tested_events: []
  
    input: |
      Feature: Parse feature file
        Scenario: Test what is going on
          Given a multiline
            """
              """
            """
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse feature file], {}]
    - [start_scenario, [Test what is going on], {}]
    - [start_step, [Given, a multiline], {}]
    - [start_multiline, [6], {}]
    - [data, ["  \"\"\"\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]
  

  parses Feature with Background:
    tested_events:
    - [feature, background]
    - [background, null]
  
    input: |
      Feature: with background
        Background: is here
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [is here], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with description and Background:
    tested_events:
    - [feature_description, background]
  
    input: |
      Feature: with background
        And some description
        Background: is here
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_feature_description, [], {}]
    - [data, [And some description], {}]
    - [finish_feature_description, [], {}]
    - [start_background, [is here], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background and Step:
    tested_events:
    - [background, step]
    - [background_step, null]
  
    input: |
      Feature: with background
        Background: is here
          And a background step
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [is here], {}]
    - [start_step, [And, a background step], {}]
    - [finish_step, [], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background and multiline Step:
    tested_events:
    - [background_step, multiline]
    - [background_multiline, multiline_data]
    - [background_multiline, multiline_end]

    input: |
      Feature: with background
        Background: is here
          And a background multiline step
            """
              With some content
            """
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [is here], {}]
    - [start_step, [And, a background multiline step], {}]
    - [start_multiline, [6], {}]
    - [data, ["  With some content\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background and Scenario and Step:
    tested_events:
    - [background, scenario]
    
    input: |
      Feature: with background
        Background: is here
        Scenario: with step
          Given a step
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [is here], {}]
    - [finish_background, [], {}]
    - [start_scenario, [with step], {}]
    - [start_step, [Given, a step], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background and Scenarios:
    tested_events: []

    input: |
      Feature: with background
        Background: is here
        Scenario: first
        Scenario: second
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [is here], {}]
    - [finish_background, [], {}]
    - [start_scenario, [first], {}]
    - [finish_scenario, [], {}]
    - [start_scenario, [second], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with multiple Backgrounds:
    tested_events:
    - [background, background]
  
    input: |
      Feature: with background
        Background: first
        Background: second
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [first], {}]
    - [finish_background, [], {}]
    - [start_background, [second], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with multiple Backgrounds and Scenarios:
    tested_events:
    - [scenario, background]

    input: |
      Feature: with background
        Background: first
        Scenario: first
        Background: second
        Scenario: second
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_background, [first], {}]
    - [finish_background, [], {}]
    - [start_scenario, [first], {}]
    - [finish_scenario, [], {}]
    - [start_background, [second], {}]
    - [finish_background, [], {}]
    - [start_scenario, [second], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background after Step:
    tested_events:
    - [step, background]

    input: |
      Feature: with background
        Scenario: at start
          Given a step
        Background: here
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_scenario, [at start], {}]
    - [start_step, [Given, a step], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [start_background, [here], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Feature with Background after multiline Step:
    tested_events:
    - [step, background]

    input: |
      Feature: with background
        Scenario: at start
          Given a multiline step
            """
            with content
            """
        Background: here
  
    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [with background], {}]
    - [start_scenario, [at start], {}]
    - [start_step, [Given, a multiline step], {}]
    - [start_multiline, [6], {}]
    - [data, ["with content\n"], {}]
    - [finish_multiline, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [start_background, [here], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses hashes:
    tested_events:
    - [step, hash]
    - [hash, null]

    input: |
      Feature: Parse hashes
        Scenario: Hashes 
          Given there is a step
            | with | a | hash | line |

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse hashes], {}]
    - [start_scenario, [Hashes], {}]
    - [start_step, [Given, there is a step], {}]
    - [start_hash, [with, a, hash, line], {}]
    - [finish_hash, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses hashes with content:
    tested_events:
    - [hash, hash]

    input: |
      Feature: Parse hashes
        Scenario: Hashes 
          Given there is a step
            | with  | content   |
            | 1     | content 1 |
            | 2     | content 2 |

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse hashes], {}]
    - [start_scenario, [Hashes], {}]
    - [start_step, [Given, there is a step], {}]
    - [start_hash, [with, content], {}]
    - [hash_data, ['1', content 1], {}]
    - [hash_data, ['2', content 2], {}]
    - [finish_hash, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Scenario Outlines:
    tested_events:
    - [feature, outline]
    - [outline, step]
    - [outline_step, null]

    input: |
      Feature: Parse outlines
        Scenario Outline: follows
          Given there <is> a <step>

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse outlines], {}]
    - [start_outline, [follows], {}]
    - [start_step, [Given, there <is> a <step>], {}]
    - [finish_step, [], {}]
    - [finish_outline, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses Scenario Outlines with Examples:
    tested_events:
    - [outline_step, examples]
    - [examples, hash]
    - [examples_hash, hash]
    - [examples_hash, null]

    input: |
      Feature: Parse outlines
        Scenario Outline: follows
          Given there <is> a <step>
        Examples: here
          | is  | step  |
          | one | two   |

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse outlines], {}]
    - [start_outline, [follows], {}]
    - [start_step, [Given, there <is> a <step>], {}]
    - [finish_step, [], {}]
    - [finish_outline, [], {}]
    - [start_examples, [here], {}]
    - [start_hash, [is, step], {}]
    - [hash_data, [one, two], {}]
    - [finish_hash, [], {}]
    - [finish_examples, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses feature tag:
    tested_events:
    - [start, tags]
    
    input: |
      @a_tag
      Feature: Parse feature tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [tags, [a_tag], {}]
    - [start_feature, [Parse feature tag], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses feature tags:
    tested_events: []
    
    input: |
      @tag_1 @tag_2
      @tag_3
      Feature: Parse feature tags

    callbacks:
    - [start_parse, [<string>], {}]
    - [tags, [tag_1, tag_2], {}]
    - [tags, [tag_3], {}]
    - [start_feature, [Parse feature tags], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses scenario tag:
    tested_events:
    - [feature, tags]
    
    input: |
      Feature: Parse scenario tag
        @a_tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse scenario tag], {}]
    - [tags, [a_tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses scenario tags:
    tested_events:
    - [after_tags, tags]
    
    input: |
      Feature: Parse scenario tags
        @tag_1 @tag_2
        @tag_3
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse scenario tags], {}]
    - [tags, [tag_1, tag_2], {}]
    - [tags, [tag_3], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses background tags:
    tested_events:
    - [after_tags, background]
    
    input: |
      Feature: Parse background tags
        @tag_1 @tag_2
        Background: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse background tags], {}]
    - [tags, [tag_1, tag_2], {}]
    - [start_background, [with tag], {}]
    - [finish_background, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses outline tags:
    tested_events:
    - [after_tags, outline]
    
    input: |
      Feature: Parse outline tags
        @tag_1 @tag_2
        Scenario Outline: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse outline tags], {}]
    - [tags, [tag_1, tag_2], {}]
    - [start_outline, [with tag], {}]
    - [finish_outline, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses examples tags:
    tested_events:
    - [after_tags, examples]
    
    input: |
      Feature: Parse outline tags
        Scenario Outline: with tag
        @tag_1 @tag_2
        Examples: here
          | is  | step  |

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse outline tags], {}]
    - [start_outline, [with tag], {}]
    - [finish_outline, [], {}]
    - [tags, [tag_1, tag_2], {}]
    - [start_examples, [here], {}]
    - [start_hash, [is, step], {}]
    - [finish_hash, [], {}]
    - [finish_examples, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after scenario:
    tested_events:
    - [scenario, tags]
    
    input: |
      Feature: Parse tags after scenario
        Scenario: without tags
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after scenario], {}]
    - [start_scenario, [without tags], {}]
    - [finish_scenario, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after step:
    tested_events:
    - [step, tags]
    
    input: |
      Feature: Parse tags after scenario
        Scenario: without tags
          Given a step
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after scenario], {}]
    - [start_scenario, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after hash:
    tested_events:
    - [hash, tags]
    
    input: |
      Feature: Parse tags after scenario
        Scenario: without tags
          Given a step
            | with | a | hash | line |
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after scenario], {}]
    - [start_scenario, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [start_hash, [with, a, hash, line], {}]
    - [finish_hash, [], {}]
    - [finish_step, [], {}]
    - [finish_scenario, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after background:
    tested_events:
    - [background, tags]
    
    input: |
      Feature: Parse tags after background
        Background: without tags
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after background], {}]
    - [start_background, [without tags], {}]
    - [finish_background, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after background step:
    tested_events:
    - [background_step, tags]
    
    input: |
      Feature: Parse tags after background
        Background: without tags
          Given a step
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after background], {}]
    - [start_background, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [finish_step, [], {}]
    - [finish_background, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after background hash:
    tested_events:
    - [background_hash, tags]
    
    input: |
      Feature: Parse tags after background
        Background: without tags
          Given a step
            | with | a | hash | line |
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after background], {}]
    - [start_background, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [start_hash, [with, a, hash, line], {}]
    - [finish_hash, [], {}]
    - [finish_step, [], {}]
    - [finish_background, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after outline:
    tested_events:
    - [outline, tags]
    
    input: |
      Feature: Parse tags after outline
        Scenario Outline: without tags
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after outline], {}]
    - [start_outline, [without tags], {}]
    - [finish_outline, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after outline step:
    tested_events:
    - [outline_step, tags]
    
    input: |
      Feature: Parse tags after outline
        Scenario Outline: without tags
          Given a step
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after outline], {}]
    - [start_outline, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [finish_step, [], {}]
    - [finish_outline, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after outline hash:
    tested_events:
    - [outline_hash, tags]
    
    input: |
      Feature: Parse tags after outline
        Scenario Outline: without tags
          Given a step
            | with | a | hash | line |
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after outline], {}]
    - [start_outline, [without tags], {}]
    - [start_step, [Given, a step], {}]
    - [start_hash, [with, a, hash, line], {}]
    - [finish_hash, [], {}]
    - [finish_step, [], {}]
    - [finish_outline, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  parses tags after examples hash:
    tested_events:
    - [examples_hash, tags]
    
    input: |
      Feature: Parse tags after examples
        Scenario Outline: without tags
        Examples: here
          | is  | step  |
        @tag
        Scenario: with tag

    callbacks:
    - [start_parse, [<string>], {}]
    - [start_feature, [Parse tags after examples], {}]
    - [start_outline, [without tags], {}]
    - [finish_outline, [], {}]
    - [start_examples, [here], {}]
    - [start_hash, [is, step], {}]
    - [finish_hash, [], {}]
    - [finish_examples, [], {}]
    - [tags, [tag], {}]
    - [start_scenario, [with tag], {}]
    - [finish_scenario, [], {}]
    - [finish_feature, [], {}]
    - [finish_parse, [], {}]


  contains untested events:
    tested_events: # untested
    - [background, outline]
    - [background_hash, hash]
    - [background_hash, null]
    - [background_hash, outline]
    - [background_hash, scenario]
    - [background_hash, step]
    - [background_step, hash]
    - [background_step, outline]
    - [background_step, scenario]
    - [background_step, step]
    - [examples, null]
    - [examples_hash, examples]
    - [after_tags, background]
    - [after_tags, outline]
    - [after_tags, scenario]
    - [feature_description, outline]
    - [hash, background]
    - [hash, outline]
    - [hash, scenario]
    - [hash, step]
    - [outline, examples]
    - [outline, null]
    - [outline_hash, examples]
    - [outline_hash, hash]
    - [outline_hash, null]
    - [outline_hash, step]
    - [outline_multiline, multiline_data]
    - [outline_multiline, multiline_end]
    - [outline_step, hash]
    - [outline_step, multiline]
    - [outline_step, step]
    - [scenario, outline]
    - [step, outline]
  

unreachable transitions:
  - [after_tags, background_hash]
  - [after_tags, background_step]
  - [after_tags, examples_hash]
  - [after_tags, feature]
  - [after_tags, feature_description]
  - [after_tags, multiline]
  - [after_tags, outline_multiline]
  - [after_tags, outline_step]
  - [after_tags, start]
  - [after_tags, step]
  - [background, examples_hash]
  - [background, outline_multiline]
  - [background_hash, background]
  - [background_hash, examples]
  - [background_hash, examples_hash]
  - [background_hash, multiline]
  - [background_hash, outline_multiline]
  - [background_hash, start]
  - [background_hash, step]
  - [background_multiline, after_tags]
  - [background_multiline, background]
  - [background_multiline, background_hash]
  - [background_multiline, examples]
  - [background_multiline, examples_hash]
  - [background_multiline, feature]
  - [background_multiline, feature_description]
  - [background_multiline, hash]
  - [background_multiline, multiline]
  - [background_multiline, outline]
  - [background_multiline, outline_hash]
  - [background_multiline, outline_multiline]
  - [background_multiline, outline_step]
  - [background_multiline, scenario]
  - [background_multiline, start]
  - [background_multiline, step]
  - [background_step, examples_hash]
  - [examples, background]
  - [examples, background_step]
  - [examples, examples]
  - [examples, outline_multiline]
  - [feature, background_hash]
  - [feature, background_step]
  - [feature, examples]
  - [feature, examples_hash]
  - [feature, feature]
  - [feature, multiline]
  - [feature, outline_multiline]
  - [feature, outline_step]
  - [feature, start]
  - [feature, step]
  - [feature_description, background_hash]
  - [feature_description, background_step]
  - [feature_description, examples]
  - [feature_description, examples_hash]
  - [feature_description, multiline]
  - [feature_description, outline_multiline]
  - [feature_description, outline_step]
  - [feature_description, start]
  - [feature_description, step]
  - [hash, background_hash]
  - [hash, background_step]
  - [hash, examples]
  - [hash, examples_hash]
  - [hash, feature]
  - [hash, feature_description]
  - [hash, multiline]
  - [hash, outline_hash]
  - [hash, outline_multiline]
  - [hash, outline_step]
  - [hash, start]
  - [multiline, background]
  - [multiline, background_step]
  - [multiline, examples]
  - [multiline, examples_hash]
  - [multiline, outline_multiline]
  - [outline, background]
  - [outline, background_hash]
  - [outline, background_step]
  - [outline, examples_hash]
  - [outline, feature]
  - [outline, feature_description]
  - [outline, multiline]
  - [outline, outline]
  - [outline, outline_multiline]
  - [outline, start]
  - [outline, step]
  - [outline_hash, background]
  - [outline_hash, background_hash]
  - [outline_hash, background_step]
  - [outline_hash, examples_hash]
  - [outline_hash, feature]
  - [outline_hash, feature_description]
  - [outline_hash, multiline]
  - [outline_hash, outline]
  - [outline_hash, outline_multiline]
  - [outline_hash, scenario]
  - [outline_hash, start]
  - [outline_hash, step]
  - [outline_multiline, background_step]
  - [outline_multiline, examples_hash]
  - [outline_step, background]
  - [outline_step, background_hash]
  - [outline_step, background_step]
  - [outline_step, examples_hash]
  - [outline_step, multiline]
  - [outline_step, start]
  - [outline_step, step]
  - [scenario, background_hash]
  - [scenario, background_step]
  - [scenario, examples]
  - [scenario, examples_hash]
  - [scenario, feature]
  - [scenario, feature_description]
  - [scenario, multiline]
  - [scenario, outline_multiline]
  - [scenario, outline_step]
  - [scenario, start]
  - [start, background]
  - [start, background_step]
  - [start, examples]
  - [start, examples_hash]
  - [start, multiline]
  - [start, outline_multiline]
  - [start, step]
  - [step, background_step]
  - [step, examples]
  - [step, examples_hash]
  - [step, outline_multiline]
  

#.............................................................................
#   test_parser.yaml
